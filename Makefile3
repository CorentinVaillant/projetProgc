# Compileur
CC = gcc
# Flags compileur 
CCFLAGS = -Wall -g 
# Debogueur
DEBOGUEUR = gdb

# Dossiers
FICHIERSRC1 = src1
FICHIERSRC2 = src2
FICHIERSRC3 = src3
FICHIERCOMPIL = compil

# Fichiers compile
SOURCES1 = identite.c
SOURCES2 = genea.c
SOURCES3 = visuarbre.c

#à modifié
SOURCES = $(patsubst %.c,$(FICHIERSRC1)/%.c,identite.c) $(patsubst %.c,$(FICHIERSRC2)/%.c, genea.c) $(patsubst %.c,$(FICHIERSRC3)/%.c, visuarbre.c)

# Fichier objet
OBJECTS = $(patsubst %.c,$(FICHIERCOMPIL)/%.o,$(SOURCES1) $(SOURCES2) $(SOURCES3))
# Nom executable
EXECUTABLE = $(FICHIERCOMPIL)/visuarbre.out
#Arguments executables
ARG = arbres/arbre10.ind arbres/arbre10.par



all: $(EXECUTABLE)
	


valgrind: $(EXECUTABLE)
	valgrind -s --leak-check=full $(EXECUTABLE) $(ARG)


run : $(EXECUTABLE)
	@echo run $(EXECUTABLE) $(ARG)
	./$(EXECUTABLE) $(ARG)


debug : $(EXECUTABLE)
	@gdb $(EXECUTABLE) $(ARG)

# création des executables
$(EXECUTABLE): $(OBJECTS)
	@mkdir -p $(FICHIERCOMPIL)
	$(CC) $(CCFLAGS) $(OBJECTS) -o $@


# compilation des objets
$(FICHIERCOMPIL)/%.o: $(FICHIERSRC1)/%.c
	@mkdir -p $(FICHIERCOMPIL)
	$(CC) $(CCFLAGS) -c $< -o $@

$(FICHIERCOMPIL)/%.o: $(FICHIERSRC2)/%.c
	@mkdir -p $(FICHIERCOMPIL)
	$(CC) $(CCFLAGS) -c $< -o $@

$(FICHIERCOMPIL)/%.o: $(FICHIERSRC3)/%.c
	@mkdir -p $(FICHIERCOMPIL)
	$(CC) $(CCFLAGS) -c $< -o $@



# nettoyage
clear:
	@echo nettoyage
	@rm -rf $(FICHIERCOMPIL) 
